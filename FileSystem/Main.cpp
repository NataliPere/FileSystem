#include <iostream>
#include <string>
#include <fstream> //file stream файловый поток - библиотека, содержащая в себе классы для работы с файловой системой устройства

bool statistic(std::string word) {
	std::string path = "file.txt";
	std::ofstream out;
	out.open(path, std::ios::app);

	if (out.is_open()) {
		out << word + ' ' << word.size() << "\n";
		out.close();
		return true;
	}
	
	out.close();
	return false;
}

int main() {
	setlocale(LC_ALL, "Russian");
	
	std::string path = "file.txt"; //путь к файлу

	//Создание файла, открытие файла, добавление записи в файл, закрытие файла 
	/*//ofstream - output file stream Запись данных в файл
	//ifstream - input file stream Чтение данных из файла
	//fstream - file stream Запись данных в файл и чтение данных из файла

	std::ofstream out; // "мост" из кода к файлу //вызов файла (альтернативный способ)


	out.open(path, std::ios::app); //вызов файла 
	if (out.is_open()) {     //проверяем открыт файл или нет, true - если файл открыт успешно
		std::cout << "Файл открыт для записи.\n";
		std::string tmp;
		std::cout << "Введите строку:";
		getline(std::cin, tmp); //ввод строки
		out << tmp + '\n'; // запись добавлена в файл
	}
	else
		std::cout << "Ошибка открытия файла.\n";

	out.close(); //закрытие файла, если не закрыть могут быть проблемы, закрытие обязательно как только завершили работу с каким-либо файлом

	//Конструктор класса - метод, выполняемый в момент создания объекта класса

	//std::ofstream out(path); // второй альтернативный способ вызова файла

	//Возможные ошибки при открытии файла для записи:
	//1. Некорректный путь;
	//2. Файл открыт другим объектом;
	//3. Нет доступа к файлу.*/

	//Чтение из файла
	/*std::ifstream in;
	in.open(path);
	if (in.is_open()) {
		std::cout << "Файл открыт для чтения.\nСодержимое файла:\n";
		//Первый способ. Посимвольное считывание. Считывание файла целиком.
		char sym;
		while (in.get(sym)) //метод возвращает ложь, цикл останавливается как только заканчиваются символы, если есть символы - true
			std::cout << sym;
		//Второй способ. Пословное считывание. Для считывания баз данных.
		while (!in.eof()) { //end of file Пока мы не в конце файла
			std::string tmp;
			in >> tmp;
			std::cout << tmp << ' ';
		//Третий способ. Построчное считывание
		std::string str;
		while (getline(in, str)) //принцип как у посимвольного способа
			std::cout << str << '\n';
	}
	else
		std::cout << "Ошибка открытия файла!\n";


	//Возможные ошибки при открытии файла для чтения:
	//1. Некорректный путь;
	//2. Файл открыт другим объектом;
	//3. Нет доступа к файлу.
	//4. Файл не существует.


	in.close();*/

	//Удаление файлов
	/*remove(path); //функция remove не умеет работать со строковыми типами данных
	if (!remove(path.c_str())) //применяется к объектам класса string. Метод строк возвращающий сишный символьный массив.
		std::cout << "Файл удалён.\n";
	else
		std::cout << "Ошибка удаления файла.\n";

	//Возможные ошибки при удалении файла:
	//1. Некорректный путь;
	//2. Файл открыт другим объектом;
	//3. Нет доступа к файлу;
	//4. Файла не существует.*/

	//Задача 1. Статистика в файл

	std::cout << "Задача 1. \n Введите первое слово: ";
	std::string str;
	std::cin >> str;
	if (statistic(str))
		std::cout << "Слово успешно записано.\n";
	else
		std::cout << "Ошибка записи.\n";
	

	std::cout << "Введите второе слово: ";
	std::cin >> str;
	if (statistic(str))
		std::cout << "Слово успешно записано.\n";
	else
		std::cout << "Ошибка записи.";

	return 0;
}